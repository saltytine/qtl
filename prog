(claim Class (Type 0))
(alias Class (schema () ()
	(Class.ceo Class)
	(Class.executive Class)
	(Class.manager Class)
	(Class.worker Class)))

(claim Nat (Type 0))
(alias Nat (schema () ()
	(Nat.zero Nat)
	(Nat.succ (-> Nat Nat))))

(claim Maybe (-> (Type 0) (Type 0)))
(alias Maybe (schema ((A (Type 0))) ()
	(Maybe.nothing (Maybe A))
	(Maybe.just (A -> Maybe A))))

(claim Vect (-> (Type 0) Nat (Type 0)))
(alias Vect (schema ((: A (Type 0))) (Nat)
	(Vect.nil (Vect A Nat.zero))
	(Vect.cons (-> (: n Nat) A (Vect A n) (Vect A (Nat.succ n))))))

(claim Vect.head (-> (: A (Type 0)) (: n Nat) (Vect A n) (Maybe A)))
(alias Vect.head (lambda (A n xs)
	(match ((Vect A n)) (xs)
		((Vect.nil _)
			(Maybe.nothing A))
		(((Vect.cons _ m x _))
			(Maybe.just A x)))))

(claim pred (-> (: n Nat) (> n zero) Nat))
(alias pred (lambda (n pf)
	(match (Nat) (n)
		((Nat.zero) (absurd pf))
		(((Nat.succ m) m)))))

(claim map (-> (: A (Type 0)) (: n Nat) (: B (Type 0))
	(-> A B) (Vect A n) (Vect B n)))
(alias map (lambda (A n B f xs)
	(match ((Vect A n)) (xs)
		((Vect.nil _)
			(Vect.nil B))
		(((Vect.cons _ m x xs))
			((Vect.cons B n) (f x) (map A B m f xs))))))
